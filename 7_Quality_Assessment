# Assembly Quality Control and Completeness

## Step 2: Blobtools
Blobtools is a command line tool designed for interactive quality assessment of genome assemblies and contaminant detection and filtering. We will use both Blobtools and Blobtools2 in the following steps:
##### 1) Apply [Blobtools](https://github.com/DRL/blobtools) 
##### 2) Create [Blobtools2](https://github.com/blobtoolkit/blobtoolkit) database
##### 3) Add data to database
##### 4) Create interactive html page with results

### 1) Apply Blobtools
Note: Identify the version of Blobtools you are using when loading the module on your HPC
Write and submit a job script with the following code:
```Bash
echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME
echo + NSLOTS = $NSLOTS
#
blastn -db /data/genomics/db/ncbi/db/latest_v4/nt/nt -query /path/to_assembly/file.fasta -outfmt "6 qseqid staxids bitscore std" -max_target_seqs 20 -max_hsps 1 -evalue 1e-20 -num_threads $NSLOTS -out clouded_leopard_blast.out
#
echo = `date` job $JOB_NAME done
#
#Explanation
#-db: ncbi nucleotide database
#-query: input file (FASTA)
#-outfmt: format of the output file (important to for blobtools) 
#-max_target_seqs: Number of aligned sequences to keep.
#-max_hsps: Maximum number of HSPs (alignments) to keep for any single query-subject pair.
#-num_threads: number of CPUs
#-out: name of the output file
```

### 2) Create Blobtools2 Database
The following can be run on an interactive, or computational node. First, load blobtools, specifying the version you are using. Next, submit the following code on your interactive node:
```Bash
blobtools create --fasta /path/to_assembly/file.fasta species_blobt_nb
#
#Explanation
#create: command to create the database with blobtools2
#--fasta: path and name of the assembly fasta file
#species_blobt_nb: name of the database
```

### 3) Add Data to Database
Once you have a Blob database, additional data can be added by parsing analysis output files into one or more fields using the blobtools "add" command. Preset parsers are available for a range of analysis types, such as BLAST or "Diamond hits" with taxonomic assignments for scaffolds or contigs. Read mapping files provide base and read coverage and BUSCO results show completeness metrics for the genome assembly.

This step can also be run on an interactive node:
```Bash
blobtools add --threads 3 --hits species_blast.out --taxrule bestsumorder --taxdump /path/to/taxdump/folder species_blobt_nb 
#
blobtools add --threads 3 --cov species_sorted.bam species_blobt_nb 
#
blobtools add --threads 3 --busco table.tsv species_blobt_nb
```

### 4) Create Interactive HTML Page with Results
After you finish creating and adding data to the database in order to visulize the results, install blobtools2 on your personal machine and download the database folder. 

```Bash
#tar zip folder
tar -czvf name-of-archive.tar.gz /path/to/directory/or/file

#load ffsend module
module load bio/ffsend

#download using ffsend
ffsend upload <file>

#make new folder for blobtool results
mkdir blobtools_results

#move to new folder
cd blobtools_results

#move or ffsend file to this folder

#unzip file
untar -xzvf archive.tar.gz

#After installing blobtools2, activate your conda environment and from the program folder by running the following command on your database folder:
conda activate btk_env
./blobtools view --remote path/to/species_nb
```

You should be able to interact with and visualize results
